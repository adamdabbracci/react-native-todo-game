service: gamilfylife-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  cognitoPoolArn: arn:aws:cognito-idp:us-east-1:332697329009:userpool/us-east-1_1905bQzmO
  cognitoPoolId: us-east-1_1905bQzmO

provider:
  name: aws
  profile: adamdabbracci
  runtime: nodejs12.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    API_HOST: http://6a8c2d6f.ngrok.io
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  authorizer:
    arn: ${self:custom.cognitoPoolArn}

functions:

  # TASKS {need to rename them}
  create:
    handler: api/tasks/create.create
    events:
      - http:
          path: tasks
          method: post
          cors: true

  list:
    handler: api/tasks/list.list
    events:
      - http:
          path: tasks
          method: get
          cors: true

  get:
    handler: api/tasks/get.get
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true

  update:
    handler: api/tasks/update.update
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
  complete:
    handler: api/tasks/update.complete
    events:
      - http:
          path: tasks/{taskId}/complete
          method: put
          cors: true

  delete:
    handler: api/tasks/delete.delete
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true


  # /users
  getAssignableUsers:
    handler: api/users.getAssignableUsers
    environment:
      COGNITO_POOL_ID: ${self:custom.cognitoPoolId}
    events:
      - http:
          path: users
          method: get
          cors: true

resources:
  Resources:
    tasksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
