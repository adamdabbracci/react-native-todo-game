service: gamilfylife-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  cognitoPoolArn: arn:aws:cognito-idp:us-east-1:332697329009:userpool/us-east-1_ZFQicxKV2
  cognitoPoolId: us-east-1_ZFQicxKV2

provider:
  name: aws
  profile: adamdabbracci
  runtime: nodejs12.x
  environment:
    TASKS_TABLE: ${self:service}-tasks-${opt:stage, self:provider.stage}
    USERS_TABLE: ${self:service}-users-${opt:stage, self:provider.stage}
    TASK_SCHEDULES_TABLE: ${self:service}-taskschedules-${opt:stage, self:provider.stage}
    COGNITO_POOL_ID: ${self:custom.cognitoPoolId}
    API_HOST:  http://e28721c126b9.ngrok.io
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TASK_SCHEDULES_TABLE}"
  authorizer:
    arn: ${self:custom.cognitoPoolArn}

functions:

  # TASKS {need to rename them}
  create:
    handler: functions/tasks/create.create
    events:
      - http:
          path: tasks
          method: post
          cors: true

  list:
    handler: functions/tasks/list.list
    events:
      - http:
          path: tasks
          method: get
          cors: true

  get:
    handler: functions/tasks/get.get
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true

  update:
    handler: functions/tasks/update.update
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
  complete:
    handler: functions/tasks/update.complete
    events:
      - http:
          path: tasks/{id}/complete
          method: put
          cors: true

  delete:
    handler: functions/tasks/delete.delete
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true


  # schedules
  getSchedules:
    handler: functions/taskschedules.list
    events:
      - http:
          path: schedules
          method: get
          cors: true
          query:
            - type

  createSchedule:
    handler: functions/taskschedules.create
    events:
      - http:
          path: schedules
          method: post
          cors: true

  updateSchedule:
    handler: functions/taskschedules.update
    events:
      - http:
          path: schedules/{id}
          method: post
          cors: true

  getSchedule:
    handler: functions/taskschedules.get
    events:
      - http:
          path: schedules/{id}
          method: get
          cors: true
  # /users
  searchUsers:
    handler: functions/users.searchByUsername
    events:
      - http:
          path: users
          method: get
          cors: true  

  # account
  getAccount:
    handler: functions/account.getAccount
    events:
      - http:
          path: account
          method: get
          cors: true
  getBank:
    handler: functions/account.getBank
    events:
      - http:
          path: account/bank
          method: get
          cors: true       

  getSponsorships:
    handler: functions/account.getSponsorships
    events:
      - http:
          path: account/sponsorships
          method: get
          cors: true
  requestSponsorship:
    handler: functions/account.requestSponsorship
    events:
      - http:
          path: account/sponsorships
          method: post
          cors: true
  getAssignableUsers:
    handler: functions/account.getAssignableUsers
    events:
      - http:
          path: account/sponsees
          method: get
          cors: true

  # task scheduler (runs every hour)
  scheduleTodaysTasks:
    handler: functions/scheduler.scheduleTodaysTasks
    schedule: rate(1 hour)


  # syncs database tables
  syncDatabase:
    handler: services/database.service.syncDb

resources:
  Resources:
    tasksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TASKS_TABLE}
    usersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
    taskSchedulesTable:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
            -
              AttributeName: id
              AttributeType: S
          KeySchema:
            -
              AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.TASK_SCHEDULES_TABLE}